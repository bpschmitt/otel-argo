# This ApplicationSet manages the deployment and ordering of all OpenTelemetry components.
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: opentelemetry-pipeline
  namespace: argocd
spec:
  # The 'List' generator is used to explicitly define the list of applications
  # and their specific configuration, including the critical sync-wave annotation.
  generators:
  - list:
      elements:
        # 1. OpenTelemetry Operator (Wave -1: Deploys first to establish CRDs)
        - name: otel-operator
          path: components/otel-operator
          syncWave: "-1"
          component: operator
        
        # # 2. OpenTelemetry Agent (Wave 1: Depends on CRDs from Operator)
        # - name: otel-agent
        #   path: components/otel-agent
        #   syncWave: "1"
        #   component: agent

        # # 3. OpenTelemetry Gateway (Wave 1: Deploys concurrently with Agent)
        # - name: otel-gateway
        #   path: components/otel-gateway
        #   syncWave: "1"
        #   component: gateway

        # # 4. OpenTelemetry Target Allocator (Wave 2: Deploys last, depends on Gateway/Agent setup)
        # - name: otel-target-allocator
        #   path: components/otel-target-allocator
        #   syncWave: "2"
        #   component: target-allocator

  # The template defines how each element from the generator list is transformed into an ArgoCD Application.
  template:
    metadata:
      # Use the 'name' from the generator list (e.g., otel-operator, otel-agent)
      name: '{{name}}'
      labels:
        app.kubernetes.io/component: '{{component}}'
    spec:
      project: default
      source:
        repoURL: 'git@github.com:bpschmitt/otel-argo.git' # <<< CHANGE THIS TO YOUR REPO URL
        targetRevision: HEAD
        # Use the 'path' from the generator list (e.g., components/otel-operator)
        path: '{{path}}'
      
      destination:
        server: https://kubernetes.default.svc
        namespace: opentelemetry # Assuming a dedicated namespace for OTEL

      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        
        # This section is CRITICAL for managing the deployment order via sync-waves.
        syncOptions:
          # The application itself must be annotated with the sync-wave value
          - ServerSideApply=true # Good practice for managing large manifests
          - RespectIgnoreDifferences=true

        # Here we apply the synchronization wave annotation taken from the generator list.
        # ArgoCD will use this annotation to determine the order of deployment execution.
        managedNamespaceMetadata:
          annotations:
            argocd.argoproj.io/sync-wave: '{{syncWave}}'
